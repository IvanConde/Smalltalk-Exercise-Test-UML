TestCase subclass: #ExcepcionesTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!ExcepcionesTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/24/2020 20:47'!test03CreoPinturaConCantidadDeManosMenorAUnoError" Arrange "	| algoFix alba |	algoFix := AlgoFix new." Act "	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Peron' conValorHora: 400.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 0 manosRodillo: 1." Assert "	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba ] raise: CantidadDeManosMenorAUnoEnHerramientaError.! !!ExcepcionesTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/24/2020 20:47'!test01PidoPresupuestoSinPintoresError" Arrange "	| algoFix alba |	algoFix := AlgoFix new." Act "	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1." Assert "	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba ] raise: PresupuestoSinPintoresError.! !!ExcepcionesTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/24/2020 20:47'!test02PidoPresupuestoSinPinturaError" Arrange "	| algoFix |	algoFix := AlgoFix new." Act "	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500." Assert "	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: nil ] raise: PintorSinPinturaError.! !!ExcepcionesTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/24/2020 20:47'!test06CreoPinturaConValorPorlitroMenorA1Error" Arrange "	| algoFix alba |	algoFix := AlgoFix new." Act "	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 1." Assert "	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba ] raise: PinturaRecibeValorPorLitroInvalidoError.! !!ExcepcionesTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/24/2020 20:47'!test05CreoPintorConValorPorHoraMenorA1Error" Arrange "	| algoFix alba |	algoFix := AlgoFix new." Act "	algoFix registrarPintorDePincel: 'Diego' conValorHora: 0.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1." Assert "	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba ] raise: PintorRecibeValorPorHoraInvalidoError.! !!ExcepcionesTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/24/2020 20:47'!test04PidoPresupuestoConMetrosCuadradosMenorAUnoError" Arrange "	| algoFix alba |	algoFix := AlgoFix new." Act "	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Peron' conValorHora: 400.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1." Assert "	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 0 conPintura: alba ] raise: MetrosCuadradosEsMenorAUnoError.! !TestCase subclass: #HerramientaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!HerramientaTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 16:31'!test03SeCalculanMetrosCuadradosTotalesParaCantidadDeManosDeLaHerramienta	" Arrange "	| herramienta metrosCuadrados algoFix alba metrosCuadradosEsperados|	algoFix := AlgoFix new.	herramienta := Rodillo new.	metrosCuadrados := 3.	metrosCuadradosEsperados := 9.		" Act "	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 3.	herramienta cargarDatos: alba.		" Assert "	self assert: (herramienta metrosCuadradosTotales: metrosCuadrados) equals: (metrosCuadradosEsperados).! !!HerramientaTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 16:31'!test02SeCalculaLitrosTotalesParaMetrosCuadradosYSeRecibeElValorEsperado	" Arrange "	| herramienta metrosCuadrados litrosEsperados |	herramienta := Rodillo new.	metrosCuadrados := 10.	litrosEsperados := 50.		" Act y Assert "	self assert: (herramienta litrosTotales: metrosCuadrados) equals: (litrosEsperados).! !!HerramientaTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 16:18'!test01SeCalculaHorasDeTrabajoParaMetrosCuadradosYSeRecibeElValorEsperado		" Arrange "	| herramienta metrosCuadrados horasEsperadas |	herramienta := Pincel new.	metrosCuadrados := 5.	horasEsperadas := 10.		" Act y Assert "	self assert: (herramienta horasDeTrabajo: metrosCuadrados) equals: (horasEsperadas).! !!HerramientaTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 16:31'!test04SeEsperaDescuentoConMetrosCuadradosMayoresA40YHerramientaPincel	" Arrange "	| herramienta metrosCuadrados algoFix alba metrosCuadradosEsperados|	algoFix := AlgoFix new.	herramienta := Pincel new.	metrosCuadrados := 50.	metrosCuadradosEsperados := 50.		" Act "	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 2 manosRodillo: 3.	herramienta cargarDatos: alba.		" Assert "	self assert: (herramienta metrosCuadradosTotales: metrosCuadrados) equals: (metrosCuadradosEsperados).! !TestCase subclass: #PintorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 16:49'!test01PintorGeneraUnPresupuestoYSeVerificaQueElObjetoTengaLosEstadosCorrectos	" Arrange "	| pintor presupuesto pintura herramienta materiales manoDeObra|	herramienta := Rodillo new.	pintor := Pintor conNombre: 'Nicolas' conValorHora: 100 yHerramienta: herramienta.	pintura := Pintura unaMarca: 'Bolainas' precioLitro: 200 cantManosPincel: 1 cantManosRodillo: 1.	manoDeObra := 5 * 1 * 100 * 1.	materiales := 5 * 5 * 200 * 1.		" Act "	presupuesto := pintor generarPresupuestoConPintura: pintura yMetrosCuadrados: 5.		" Assert "	self assert: (presupuesto responsable) equals: ('Nicolas').	self assert: (presupuesto valor) equals: (manoDeObra + materiales).! !!PintorTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 17:34'!test02PrecioPorHoraDeTrabajoDevuelveElPrecioEsperado	" Arrange "	| pintor herramienta |	herramienta := Pintor new.	pintor := Pintor conNombre: 'Robert' conValorHora: 100 yHerramienta: herramienta.	" Act y Assert "	self assert: (pintor precioPorHoras: 5) equals: (500).! !TestCase subclass: #PinturaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 17:00'!test01PinturaRecibeCantidadDeLitrosYDevuelveElCosto	" Arrange "	| pintura precioEsperado |	pintura := Pintura unaMarca: 'Alberto' precioLitro: 200 cantManosPincel: 1 cantManosRodillo: 1.	precioEsperado := 1000.		" Act y Assert "	self assert: (pintura precioPorLitros: 5) equals: (precioEsperado).! !TestCase subclass: #PresupuestoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 17:37'!test03SeAplicaDescuentoAPresupuestoConMetrosCuadradosMayoresA40	" Arrange "	| pintor presupuesto pintura herramienta materiales manoDeObra|	herramienta := Pincel new.	pintor := Pintor conNombre: 'Escanor' conValorHora: 100 yHerramienta: herramienta.	pintura := Pintura unaMarca: 'Zeus' precioLitro: 200 cantManosPincel: 1 cantManosRodillo: 1.	presupuesto := pintor generarPresupuestoConPintura: pintura yMetrosCuadrados: 55.	manoDeObra := 55 * 2 * 100 * 1 * 0.5.	materiales := 55 * 4 * 200 * 1.	" Act y Assert "	self assert: (presupuesto valor) equals: (manoDeObra + materiales).! !!PresupuestoTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 17:11'!test01PresupuestoCalculaManoDeObraCorrectamente	" Arrange "	| pintor presupuesto pintura herramienta manoDeObra|	herramienta := Rodillo new.	pintor := Pintor conNombre: 'Enrick' conValorHora: 100 yHerramienta: herramienta.	pintura := Pintura unaMarca: 'Xtrem' precioLitro: 200 cantManosPincel: 1 cantManosRodillo: 1.	presupuesto := pintor generarPresupuestoConPintura: pintura yMetrosCuadrados: 5.	manoDeObra := 5 * 1 * 100 * 1.	" Act y Assert "	self assert: (presupuesto calcularManoDeObraConPintor: pintor yHerramienta: herramienta) equals: (manoDeObra).! !!PresupuestoTest methodsFor: 'tests' stamp: 'SilverWerewolf 5/25/2020 17:15'!test02PresupuestoCalculaLosMaterialesCorrectamente	" Arrange "	| pintor presupuesto pintura herramienta materiales|	herramienta := Pincel new.	pintor := Pintor conNombre: 'Jeremias Springfield' conValorHora: 100 yHerramienta: herramienta.	pintura := Pintura unaMarca: 'Latex' precioLitro: 200 cantManosPincel: 1 cantManosRodillo: 1.	presupuesto := pintor generarPresupuestoConPintura: pintura yMetrosCuadrados: 10.	materiales := 10 * 4 * 200 * 1.	" Act y Assert "	self assert: (presupuesto calcularMaterialesConPintor: pintor yHerramienta: herramienta) equals: (materiales).! !